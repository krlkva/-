// –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
const products = [
    {
        id: 1,
        name: "–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy S21",
        price: 59990,
        image: "images/7384989961.jpg",
        description: "–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –æ—Ç–ª–∏—á–Ω–æ–π –∫–∞–º–µ—Ä–æ–π –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."
    },
    {
        id: 2,
        name: "–ù–æ—É—Ç–±—É–∫ Apple MacBook Air",
        price: 99990,
        image: "images/laptop.jpg",
        description: "–õ–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞."
    },
    {
        id: 3,
        name: "–ù–∞—É—à–Ω–∏–∫–∏ Sony WH-1000XM4",
        price: 24990,
        image: "images/headphones.jpg",
        description: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º."
    },
    {
        id: 4,
        name: "–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç Canon EOS R6",
        price: 159990,
        image: "images/camera.jpg",
        description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞."
    },
    {
        id: 5,
        name: "–£–º–Ω—ã–µ —á–∞—Å—ã Apple Watch Series 7",
        price: 32990,
        image: "images/smartwatch.jpg",
        description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–º–Ω—ã–µ —á–∞—Å—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π."
    },
    {
        id: 6,
        name: "–ü–ª–∞–Ω—à–µ—Ç iPad Pro 11",
        price: 74990,
        image: "images/tablet.jpg",
        description: "–ú–æ—â–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π."
    },
    {
        id: 7,
        name: "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å PlayStation 5",
        price: 49990,
        image: "images/console.jpg",
        description: "–ù–æ–≤–µ–π—à–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å –æ—Ç Sony."
    },
    {
        id: 8,
        name: "–¢–µ–ª–µ–≤–∏–∑–æ—Ä LG OLED55C1",
        price: 89990,
        image: "images/tv.jpg",
        description: "4K OLED —Ç–µ–ª–µ–≤–∏–∑–æ—Ä —Å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º."
    }
];

// –û–±—ä–µ–∫—Ç –∫–æ—Ä–∑–∏–Ω—ã
const cart = {
    items: [],
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã...');
        
        // –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –î–ê–ù–ù–´–• - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        localStorage.removeItem('cart');
        
        try {
            const savedCart = localStorage.getItem('cart');
            if (savedCart) {
                const parsedCart = JSON.parse(savedCart);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if (Array.isArray(parsedCart)) {
                    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                    this.items = parsedCart.filter(item => 
                        item && 
                        typeof item.id === 'number' && 
                        typeof item.quantity === 'number' && 
                        item.quantity > 0
                    ).map(item => ({
                        id: Number(item.id),
                        name: String(item.name || '–¢–æ–≤–∞—Ä'),
                        price: Number(item.price) || 0,
                        quantity: Number(item.quantity) || 1,
                        image: String(item.image || '')
                    }));
                    
                    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞:', this.items);
                } else {
                    this.items = [];
                }
            } else {
                this.items = [];
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
            this.items = [];
        }
        
        this.save();
        this.updateCartDisplay();
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    add(productId) {
        const product = products.find(p => p.id === productId);
        if (!product) return;
        
        const existingItem = this.items.find(item => item.id === productId);
        
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            this.items.push({
                id: product.id,
                name: product.name,
                price: product.price,
                quantity: 1,
                image: product.image
            });
        }
        
        this.save();
        this.updateCartDisplay();
        this.updateProductCards();
        showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
    },
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    remove(productId) {
        this.items = this.items.filter(item => item.id !== productId);
        this.save();
        this.updateCartDisplay();
        this.updateProductCards();
        showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
    },
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    updateQuantity(productId, newQuantity) {
        if (newQuantity < 1) {
            this.remove(productId);
            return;
        }
        
        const item = this.items.find(item => item.id === productId);
        if (item) {
            item.quantity = Number(newQuantity);
            this.save();
            this.updateCartDisplay();
            this.updateProductCards();
        }
    },
    
    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    clear() {
        this.items = [];
        this.save();
        this.updateCartDisplay();
        this.updateProductCards();
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    },
    
    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    getTotalPrice() {
        return this.items.reduce((total, item) => {
            const price = Number(item.price) || 0;
            const quantity = Number(item.quantity) || 0;
            return total + (price * quantity);
        }, 0);
    },
    
    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    getTotalCount() {
        return this.items.reduce((total, item) => {
            const quantity = Number(item.quantity) || 0;
            return total + quantity;
        }, 0);
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    getItemQuantity(productId) {
        const item = this.items.find(item => item.id === productId);
        return item ? Number(item.quantity) : 0;
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
    save() {
        try {
            localStorage.setItem('cart', JSON.stringify(this.items));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    updateCartDisplay() {
        const cartCount = document.getElementById('cart-count');
        if (cartCount) {
            cartCount.textContent = this.getTotalCount();
        }
        this.displayCartItems();
    },
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    displayCartItems() {
        const cartItems = document.getElementById('cart-items');
        const totalPrice = document.getElementById('total-price');
        
        if (!cartItems) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç cart-items');
            return;
        }
        
        cartItems.innerHTML = '';
        
        // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        if (this.items.length === 0) {
            cartItems.innerHTML = `
                <div class="empty-cart">
                    <div style="text-align: center; padding: 3rem; color: #666;">
                        <p style="font-size: 2rem; margin-bottom: 1rem;">üõí</p>
                        <p style="font-size: 1.2rem; margin-bottom: 0.5rem;">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                        <p style="color: #999;">–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞</p>
                    </div>
                </div>
            `;
            if (totalPrice) totalPrice.textContent = '0';
            return;
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        this.items.forEach(item => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            const itemPrice = Number(item.price) || 0;
            const itemQuantity = Number(item.quantity) || 0;
            const itemTotal = itemPrice * itemQuantity;
            const itemName = String(item.name || '–¢–æ–≤–∞—Ä');
            
            const cartItem = document.createElement('div');
            cartItem.className = 'cart-item';
            
            cartItem.innerHTML = `
                <div class="cart-item-info">
                    <div class="cart-item-title">${itemName}</div>
                    <div class="cart-item-price">
                        ${itemPrice.toLocaleString()} —Ä—É–±. √ó ${itemQuantity} = <strong>${itemTotal.toLocaleString()} —Ä—É–±.</strong>
                    </div>
                </div>
                <div class="cart-item-controls">
                    <button class="quantity-btn decrease" data-id="${item.id}">-</button>
                    <span class="quantity">${itemQuantity}</span>
                    <button class="quantity-btn increase" data-id="${item.id}">+</button>
                    <button class="remove-btn" data-id="${item.id}">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            `;
            
            cartItems.appendChild(cartItem);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        const clearButton = document.createElement('button');
        clearButton.className = 'btn btn-danger';
        clearButton.textContent = '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É';
        clearButton.style.marginTop = '1rem';
        clearButton.style.width = '100%';
        clearButton.addEventListener('click', () => {
            this.clear();
        });
        
        cartItems.appendChild(clearButton);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        if (totalPrice) {
            const total = this.getTotalPrice();
            totalPrice.textContent = total.toLocaleString();
        }
        
        this.addCartEventListeners();
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    updateProductCards() {
        document.querySelectorAll('.product-card').forEach(card => {
            const addToCartBtn = card.querySelector('.add-to-cart');
            if (!addToCartBtn) return;
            
            const productId = parseInt(addToCartBtn.getAttribute('data-id'));
            const quantity = this.getItemQuantity(productId);
            const quantityControls = card.querySelector('.quantity-controls');
            const addButton = card.querySelector('.add-to-cart');
            
            if (quantity > 0) {
                if (quantityControls) {
                    quantityControls.style.display = 'flex';
                    const quantityElement = quantityControls.querySelector('.quantity');
                    if (quantityElement) quantityElement.textContent = quantity;
                }
                if (addButton) addButton.style.display = 'none';
            } else {
                if (quantityControls) quantityControls.style.display = 'none';
                if (addButton) addButton.style.display = 'block';
            }
        });
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    addCartEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        document.querySelectorAll('#cart-items .increase').forEach(button => {
            button.addEventListener('click', function() {
                const productId = parseInt(this.getAttribute('data-id'));
                const item = cart.items.find(item => item.id === productId);
                if (item) {
                    cart.updateQuantity(productId, (Number(item.quantity) || 0) + 1);
                }
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        document.querySelectorAll('#cart-items .decrease').forEach(button => {
            button.addEventListener('click', function() {
                const productId = parseInt(this.getAttribute('data-id'));
                const item = cart.items.find(item => item.id === productId);
                if (item) {
                    cart.updateQuantity(productId, (Number(item.quantity) || 0) - 1);
                }
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        document.querySelectorAll('#cart-items .remove-btn').forEach(button => {
            button.addEventListener('click', function() {
                const productId = parseInt(this.getAttribute('data-id'));
                cart.remove(productId);
            });
        });
    }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
function displayProducts() {
    const productsGrid = document.getElementById('products-grid');
    
    if (!productsGrid) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç products-grid');
        return;
    }
    
    productsGrid.innerHTML = '';
    
    products.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        const quantity = cart.getItemQuantity(product.id);
        
        productCard.innerHTML = `
            <div class="product-image-container">
                <img src="${product.image}" alt="${product.name}" class="product-image"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'">
                <div class="product-image-placeholder" style="display: none;">
                    üì± ${product.name.split(' ')[0]}
                </div>
            </div>
            <div class="product-info">
                <h3 class="product-title">${product.name}</h3>
                <p class="product-description">${product.description}</p>
                <p class="product-price">${product.price.toLocaleString()} —Ä—É–±.</p>
                
                <div class="quantity-controls" style="display: ${quantity > 0 ? 'flex' : 'none'}">
                    <button class="quantity-btn decrease" data-id="${product.id}">-</button>
                    <span class="quantity">${quantity}</span>
                    <button class="quantity-btn increase" data-id="${product.id}">+</button>
                </div>
                
                <button class="btn btn-primary add-to-cart" data-id="${product.id}" 
                        style="display: ${quantity > 0 ? 'none' : 'block'}">
                    –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
        `;
        
        productsGrid.appendChild(productCard);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    document.querySelectorAll('.add-to-cart').forEach(button => {
        button.addEventListener('click', function() {
            const productId = parseInt(this.getAttribute('data-id'));
            cart.add(productId);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    document.querySelectorAll('.product-card .increase').forEach(button => {
        button.addEventListener('click', function() {
            const productId = parseInt(this.getAttribute('data-id'));
            const item = cart.items.find(item => item.id === productId);
            if (item) {
                cart.updateQuantity(productId, (Number(item.quantity) || 0) + 1);
            }
        });
    });
    
    document.querySelectorAll('.product-card .decrease').forEach(button => {
        button.addEventListener('click', function() {
            const productId = parseInt(this.getAttribute('data-id'));
            const item = cart.items.find(item => item.id === productId);
            if (item) {
                cart.updateQuantity(productId, (Number(item.quantity) || 0) - 1);
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.notification').forEach(notification => {
        notification.remove();
    });
    
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    
    // –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–û–ô –ö–û–†–ó–ò–ù–´ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞
    localStorage.removeItem('cart');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart.init();
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    displayProducts();
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const cartModal = document.getElementById('cart-modal');
    const orderModal = document.getElementById('order-modal');
    const successModal = document.getElementById('success-modal');
    const cartIcon = document.getElementById('cart-icon');
    const closeCart = document.getElementById('close-cart');
    const checkoutBtn = document.getElementById('checkout-btn');
    const closeOrder = document.getElementById('close-order');
    const closeSuccess = document.getElementById('close-success');
    const orderForm = document.getElementById('order-form');
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    if (cartIcon && cartModal) {
        cartIcon.addEventListener('click', function() {
            console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã');
            cartModal.style.display = 'block';
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    if (closeCart && cartModal) {
        closeCart.addEventListener('click', function() {
            cartModal.style.display = 'none';
        });
    }
    
    // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    if (checkoutBtn && cartModal && orderModal) {
        checkoutBtn.addEventListener('click', function() {
            if (cart.items.length === 0) {
                showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.');
                return;
            }
            cartModal.style.display = 'none';
            orderModal.style.display = 'block';
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
    if (closeOrder && orderModal) {
        closeOrder.addEventListener('click', function() {
            orderModal.style.display = 'none';
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
    if (orderForm && orderModal && successModal) {
        orderForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const order = {
                firstName: formData.get('first-name'),
                lastName: formData.get('last-name'),
                address: formData.get('address'),
                phone: formData.get('phone'),
                items: cart.items,
                total: cart.getTotalPrice(),
                date: new Date().toLocaleString()
            };
            
            console.log('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', order);
            
            orderModal.style.display = 'none';
            successModal.style.display = 'block';
            
            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
            cart.clear();
            
            orderForm.reset();
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if (closeSuccess && successModal) {
        closeSuccess.addEventListener('click', function() {
            successModal.style.display = 'none';
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
    window.addEventListener('click', function(e) {
        if (e.target === cartModal) cartModal.style.display = 'none';
        if (e.target === orderModal) orderModal.style.display = 'none';
        if (e.target === successModal) successModal.style.display = 'none';
    });
    
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
});

